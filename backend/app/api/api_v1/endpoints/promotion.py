from fastapi import APIRouter, HTTPException, Depends
from typing import List, Optional
from datetime import date, timedelta
from app.schemas.promotion import PromotionItem, PromotionResponse, CreatePromotionRequest

router = APIRouter()

@router.get("/", response_model=PromotionResponse)
async def get_promotions():
    """Get current promotions"""
    # This would normally fetch from the database
    # For now, returning dummy data
    today = date.today()
    items = [
        PromotionItem(
            id=1,
            item_name="Burger Special",
            discount_percentage=15,
            start_date=today,
            end_date=today + timedelta(days=7),
            description="15% off our signature burger",
            status="active"
        ),
        PromotionItem(
            id=2,
            item_name="Pizza Monday",
            discount_percentage=20,
            start_date=today - timedelta(days=2),
            end_date=today + timedelta(days=5),
            description="20% off all pizzas every Monday",
            status="active"
        ),
        PromotionItem(
            id=3,
            item_name="Dessert Deal",
            discount_percentage=10,
            start_date=today + timedelta(days=3),
            end_date=today + timedelta(days=10),
            description="10% off all desserts",
            status="scheduled"
        ),
    ]
    
    return PromotionResponse(items=items)

@router.post("/", response_model=PromotionItem, status_code=201)
async def create_promotion(promotion_data: CreatePromotionRequest):
    """Create a new promotion"""
    # In a real implementation, this would save to the database
    # For now, we just return the same data with an ID
    return PromotionItem(
        id=4,  # In a real app, this would be generated by the database
        item_name=promotion_data.item_name,
        discount_percentage=promotion_data.discount_percentage,
        start_date=promotion_data.start_date,
        end_date=promotion_data.end_date,
        description=promotion_data.description,
        status="scheduled" if promotion_data.start_date > date.today() else "active"
    )
